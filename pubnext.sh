#!/bin/sh
myself=`basename "$0"`
mydir=`dirname "$0"`
ver='1.0'
subpref='[newsletter]' # prefix for mail subject
tpref='t' # prefix for text file names
adds='ad.txt' # address list for recipients
webdir=''
gopherdir=''
draft='DRAFT' # mark for draft texts (must be at beginning of at least 1 line)
arch='Archiv' # archive for processed texts
htmlhead='<HTML><BODY>'
htmlfoot="</BODY><!-- generated by $myself --></HTML>"

lockf='.pubnext.lock'
logfile='.pubnext.log'
convert1="$mydir/mrkdwn.pl" # markdown to html
convert2='lynx -display_charset=US-ASCII -force-html -dump' # html to text
mailer=mailx # mail program
#mailer='logit ::'
tmpf1='.pubnext.html'
tmpf2='.pubnext.txt'
donefile='' # name of sent file

if test "$1" = ""
then cat <<EOH >&2

usage: $myself <dir> [<prefix> <addressfile> <webdir> <gopherdir>]
 will change to directory <dir>, and send first <text> with <prefix> to all
 addresses in <addressfile>,
 after Markdown conversion with $convert1
 (adding html&body tags for standalone HTML file),
 and HTML-text conversion with $convert2,
 and copy the text to <webdir> as HTML and to <gopherdir> as pure text
 (with .html/.txt suffixes, respectively, ignoring nonexistent directories),
 and do "git mv <text> $arch" afterwards (or just "mv", unless .git present)

 only texts not containing "$draft" at beginning of lines will be considered

 defaults: prefix=$tpref
  addressfile=$adds
  webdir=$webdir
  gopherdir=$gopherdir

 addressfile contains one address per line, lines with leading # are ignored

 return value 0 if <text> found and processed, >0 otherwise
 (logging into $logfile, lockfile $lockf, version $ver)

EOH
exit 1
fi

logit () { echo "$@" >>$logfile ; }

abort () { # end script and remove lockfile, if return code higher than 9
 exc=$1
 shift
 logit "abort: $@"
 if test $exc -gt 9
 then rm -f $lockf
 fi
 echo "tail $logfile:" # report to stdout, will be sent as cronjob e-mail
 tail $logfile
 exit $exc
}

dir="$1" # working directory
if test ! -x "$dir" -o ! -w "$dir" -o ! -r "$dir" -o ! -d "$dir"
then abort 5 "$dir is not a fully accessible directory"
fi

cd "$dir"

if test -f $lockf
then abort 6 "lockfile $lockf exists"
fi

now=`date -u`
echo "lockfile for $myself with PID $$" >$lockf
echo "at $now" >>$lockf
echo >$tmpf1

logit starting at $now

tpref=${2:-$tpref}
logit looking for files with prefix $tpref
adds=${3:-$adds}
logit looking for mailing addresses in $adds
webdir=${4:-$webdir}
if test "$webdir" != ""
then logit directory for saving HTML files: $webdir
fi
gopherdir=${5:-$gopherdir}
if test "$gopherdir" != ""
then logit directory for saving text files: $gopherdir
fi

# try to update from remote repo
git pull >/dev/null 2>&1

# process all files with names beginning with $tpref
ls -1 $tpref* | { while read fn
do
 if ! grep "^$draft" "$fn" >/dev/null 2>&1
 then # if no draft flag found in text
  logit processing $fn
  echo "$htmlhead" >$tmpf1
  # convert markdown to html, and replace German lower case umlauts (UTF8)
  $convert1 "$fn" |
   sed -e 's/ä/\&auml;/g;s/ö/\&ouml;/g;s/ü/\&uuml;/g' >>$tmpf1
  titl=`grep '<h1' $tmpf1 | sed -e 's/<[^>]*>//g'` # get title for subject
  echo "$htmlfoot" >>$tmpf1
  $convert2 $tmpf1 >$tmpf2 # generate text version
  logit sending to
  # remove comments and empty lines from address list, and send e-mails
  sed -e 's/[ 	]*[#;].*//;/^$/d' $adds | { while read adrow
   do logit : $adrow
   $mailer -a $tmpf1 -s "$subpref $titl" $adrow <$tmpf2
   done
   }
  # namebase without suffix
  namebase=${fn%.*}
  # copy HTML version into webdir
  if test "$webdir" != ""
  then
   cat $tmpf1 >$webdir/$namebase.html 2>/dev/null &&
     chmod a+r $webdir/$namebase.html 2>/dev/null
  fi
  # copy text version into gopherdir
  if test "$gopherdir" != ""
  then
   cat $tmpf2 >$gopherdir/$namebase.txt 2>/dev/null &&
     chmod a+r $gopherdir/$namebase.txt 2>/dev/null
  fi
  logit done with $fn
  echo $fn >$tmpf1 # save name of processed file for enclosing script
  break
 else logit ignoring draft $fn
 fi
done
}

donefile=`cat $tmpf1`
if test ! -r "$donefile"
then
 logit no file found and nothing processed
 retval=1
else
 retval=0
 if git mv "$donefile" $arch >/dev/null 2>&1 # if git mv seems to work
 then logit git mv done
  # commit and push archived text file
  git commit -a -m ": $myself processing $donefile" >/dev/null 2>&1 && logit git commit done
  sleep 9
  git push >/dev/null 2>&1 && logit git push done
 else # simple mv for archiving
  mv "$donefile" $arch && logit mv into $arch done
 fi
fi

rm -f $lockf
logit finished.
echo >>$logfile # empty line in logfile
exit $retval
